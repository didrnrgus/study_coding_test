✅ 1. 선택정렬 (Selection Sort)
/*
    맨첫번쨰 인덱스 최소값이 있으면 스왑할 인덱스
    순회는 그 뒤부터 최소값을 찾아 뒤로 쭉 순회
*/
using System;
using System.Collections.Generic;

class Program
{
    static List<int> Solution(List<int> arr)
    {
        for (int i = 0; i < arr.Count - 1; i++)
        {
            int minIdx = i;
            for (int j = i + 1; j < arr.Count; j++)
            {
                if (arr[j] < arr[minIdx])
                    minIdx = j;
            }
            if (minIdx != i)
            {
                int temp = arr[i];
                arr[i] = arr[minIdx];
                arr[minIdx] = temp;
            }
        }
        return arr;
    }

    static void Main()
    {
        var arr = new List<int> { 13, 5, 11, 7, 23, 15 };
        var result = Solution(arr);
        Console.WriteLine(string.Join(" ", result));
    }
}





✅ 2. 버블정렬 (Bubble Sort)
/*
    뒤에서부터 정렬해 나감.
*/
using System;
using System.Collections.Generic;

class Program
{
    static List<int> Solution(List<int> arr)
    {
        for (int i = 0; i < arr.Count - 1; i++)
        {
            for (int j = 0; j < arr.Count - i - 1; j++)
            {
                if (arr[j] > arr[j + 1])
                {
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
        return arr;
    }

    static void Main()
    {
        var arr = new List<int> { 13, 5, 11, 7, 23, 15 };
        var result = Solution(arr);
        Console.WriteLine(string.Join(" ", result));
    }
}





✅ 3. Special Sort (음수는 앞쪽, 양수는 뒤쪽, 순서 유지 X)

using System;
using System.Collections.Generic;

class Program
{
    static List<int> Solution(List<int> arr)
    {
        List<int> result = new List<int>();
        foreach (int x in arr)
            if (x < 0) result.Add(x);
        foreach (int x in arr)
            if (x >= 0) result.Add(x);
        return result;
    }

    static void Main()
    {
        var arr = new List<int> { 1, 2, 3, -3, -2, 5, 6, -6 };
        var result = Solution(arr);
        Console.WriteLine(string.Join(" ", result));
    }
}





✅ 4. 삽입정렬 (Insertion Sort)
/*
    앞에서 두번째를 키 로 잡고
    크기 비교 하고, 앞에놈을 뒤로 밀어
    빈자리에 키를 삽입.
*/
using System;
using System.Collections.Generic;

class Program
{
    static List<int> Solution(List<int> arr)
    {
        for (int i = 1; i < arr.Count; i++)
        {
            int key = arr[i];
            int j = i - 1;              // 키보다 한칸 앞에있는애부터
            while (j >= 0 && arr[j] > key)
            {
                arr[j + 1] = arr[j];    // 뒤로 미는로직직
                j--;                    // 더 앞으로 세팅
            }
            arr[j + 1] = key;           // 밀고나서 빈자리 생긴곳에 key 삽입.
        }
        return arr;
    }

    static void Main()
    {
        var arr = new List<int> { 11, 7, 5, 6, 10, 9 };
        var result = Solution(arr);
        Console.WriteLine(string.Join(" ", result));
    }
}





✅ 5. LRU (Least Recently Used - 캐시)

using System;
using System.Collections.Generic;

class Program
{
    static List<int> Solution(int size, List<int> arr)
    {
        List<int> cache = new List<int>(new int[size]);
        foreach (int x in arr)
        {
            // 일단 캐시슬롯안에 있는지 없는지 봐라
            // e가 cacheArray 의 어느 인덱스에 있는지 확인.
            int pos = cache.IndexOf(x);
            if (pos == -1)
            {
                // Cache Miss
                for (int i = size - 1; i >= 1; i--)
                    cache[i] = cache[i - 1];
            }
            else
            {
                // Cache Hit
                for (int i = pos; i >= 1; i--)
                    cache[i] = cache[i - 1];
            }
            
            // 이미 있던 없던 맨 앞 인덱스에 놓는다
            cache[0] = x;
        }
        return cache;
    }

    static void Main()
    {
        int size = 5;
        var arr = new List<int> { 1, 2, 3, 2, 6, 2, 3, 5, 7 };
        var result = Solution(size, arr);
        Console.WriteLine(string.Join(" ", result));
    }
}





✅ 6. 장난꾸러기 현수 (정렬 후 위치가 다른 인덱스 찾기)

using System;
using System.Collections.Generic;
using System.Linq;

class Program
{
    static List<int> Solution(List<int> arr)
    {
        var tmp = new List<int>(arr);
        tmp.Sort();
        List<int> result = new List<int>();

        for (int i = 0; i < arr.Count; i++)
        {
            if (arr[i] != tmp[i])
                result.Add(i + 1); // 1-based index
        }

        return result;
    }

    static void Main()
    {
        var arr = new List<int> { 120, 125, 152, 130, 135, 135, 143, 127, 160 };
        var result = Solution(arr);
        Console.WriteLine(string.Join(" ", result));
    }
}





✅ 7. 좌표 정렬 (x 오름차순, x 같으면 y 오름차순)

using System;
using System.Collections.Generic;

class Program
{
    static List<(int x, int y)> Solution(List<(int x, int y)> coords)
    {
        coords.Sort((a, b) =>
        {
            if (a.x != b.x) return a.x.CompareTo(b.x);
            return a.y.CompareTo(b.y);
        });
        return coords;
    }

    static void Main()
    {
        var coords = new List<(int, int)> { (2, 7), (1, 3), (1, 2), (2, 5), (3, 6) };
        var result = Solution(coords);
        foreach (var p in result)
            Console.WriteLine($"{p.x} {p.y}");
    }
}





✅ 8. 회의실 배정 (그리디: 끝나는 시간 기준 정렬)

using System;
using System.Collections.Generic;

class Program
{
    static int Solution(List<(int start, int end)> meetings)
    {
        // 정렬을 했기때문에 처음부터 끝난시간에 바로 시작하는 회의 선택하면 됨.
        // 끝나는 시간과 다음 시작하는시간이 이어지게끔.
        // 겹치면 안되고 딱 맞거나 살짝 떨어지는건 됨.
        meetings.Sort((a, b) => a.end.CompareTo(b.end));
        int count = 0, endTime = 0;

        foreach (var m in meetings)
        {
            if (m.start >= endTime)
            {
                count++;
                endTime = m.end;
            }
        }
        return count;
    }

    static void Main()
    {
        var meetings = new List<(int, int)> { (1, 4), (2, 3), (3, 5), (4, 6), (5, 7) };
        Console.WriteLine(Solution(meetings));
    }
}





✅ 9. 결혼식 (동시간 최대 인원수)
/*
    언제 가든지 상관없이 오는시간으로 정렬을 해서
    얼마가 겹치는지 봐야할듯?
*/
using System;
using System.Collections.Generic;

class Program
{
    static int Solution(List<(int _in, int _out)> times)
    {
        int resultMax = 0;

        // 오는시간 나가는시간 따로 떼어서 정렬시켜보자
        List<(int time, char key)> events = new List<(int, char)> ();
        foreach (var item in times)
        {
            events.Add((item._in, 's'));
            events.Add((item._out, 'e'));
        }

        // 나가는게 먼저 와야한다
        // 시간 겹쳐도 나가는이벤트는 그 시간에 없는것이니까.
        events.Sort((a, b) =>
        {
            if (a.time == b.time)
                return a.key - b.key;

            return a.time - b.time;
        });

        int curPerson = 0;

        foreach (var item in events)
        {
            if (item.key == 's')
            {
                curPerson++;
                resultMax = Math.Max(resultMax, curPerson);
            }
            else if (item.key == 'e')
            {
                curPerson--;
            }
        }

        return resultMax;
    }

    static void Main()
    {
        var guests = new List<(int, int)> { (14, 18), (12, 15), (15, 20), (20, 30), (5, 14) };
        Console.WriteLine(Solution(guests));
    }
}




✅ 10. 이분검색 (Binary Search)

using System;
using System.Collections.Generic;

class Program
{
    static int Solution(int target, List<int> arr)
    {
        int result = 0;
        arr.Sort();

        int left = 0; int right = arr.Count - 1;
        int mid = arr.Count / 2;

        while (left <= right)
        {
            if (target == arr[mid])
                return mid + 1; // 0인덱스는 1번쨰로 해주니까.
            else if (target > arr[mid])
            {
                left = mid;
                mid += (right - mid) / 2;
            }
            else if (target < arr[mid])
            {
                right = mid;
                mid -= (mid - left) / 2;
            }
        }
        return result;
    }

    static void Main()
    {
        var arr = new List<int> { 23, 87, 65, 12, 57, 32, 99, 81 };
        int target = 32;
        Console.WriteLine(Solution(target, arr));
    }
}





✅ 11. 뮤직비디오 (이분탐색 + DVD 용량 판단)
/*
    더 좋은답을향해 이분탐색으로 끝까지 해본다.
*/
using System;
using System.Collections.Generic;
using System.Linq;

class Program
{
    static int Count(List<int> songs, int capacity)
    {
        int cnt = 1, sum = 0;
        foreach (var x in songs)
        {
            // 배열 요소를 하나씩 더하다가 시디 캐파를 넘으면
            // 카운트 하나 올리고, 다시 캐파 합계 초기화
            if (sum + x > capacity)
            {
                cnt++;
                sum = x;
            }
            else
            {
                sum += x;
            }
        }

        // 시디 한장당 캐파 몇으로 잡느냐에따른 
        // 모든 음약을 담는 시디 장 수.
        return cnt;
    }

    static int Solution(int m, List<int> songs)
    {
        int lt = songs.Max();
        int rt = songs.Sum();
        int answer = 0;

        while (lt <= rt)
        {
            // 처음엔 mid 27
            // 두번쨰에 17
            int mid = (lt + rt) / 2;

            // 처음에 2장나오는데 
            // 1장당 용량을 더 줄일 수 있는것임.
            // 이렇게 간다면? left 9 , right 27-1
            if (Count(songs, mid) <= m)
            {
                answer = mid;
                rt = mid - 1;
            }
            else
            {
                lt = mid + 1;
            }
        }

        return answer;
    }

    static void Main()
    {
        var songs = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
        int m = 3;
        Console.WriteLine(Solution(m, songs)); // 출력: 17
    }
}





✅ 12. 마구간 정하기 (이분탐색 + 최소 거리 판단)

using System;
using System.Collections.Generic;

class Program
{
    static int Count(List<int> stable, int dist)
    {
        // 인접말 최대거리 테스트값으로 C 마리의 말을 모두 배치할 수 있는지.
        int endPoint = stable[0];
        int count = 1;

        for(int i = 1; i<stable.Count; i++)
        {
            if(stable[i] - endPoint >= dist)
            {
                endPoint = stable[i];
                count++;
            }
        }

        return count;
    }

    static int Solution(int c, List<int> stable)
    {
        int result = 0;

        stable.Sort();

        int left = stable[0];
        int right = stable[stable.Count - 1];
        
        while(left <= right)
        {
            // 인접말의 최대거리 테스트값
            int mid = (left + right) / 2;

            if(Count(stable, mid) >= c)
            {
                // 배치해야 하는 말 갯수가 같다면,
                // 더 좋은 답을 찾기위해 mid 를 더 올려야 함.

                // 그리고 mid 를 올리는 경우는 배치가능한 말이 
                // 너무 많아서 거리를 늘려야 하겠지.
                left = mid + 1;
                result = mid;
            }
            else
            {
                right = mid - 1;
            }
        }

        return result;
    }

    static void Main()
    {
        var stable = new List<int> { 1, 2, 8, 4, 9 };
        int c = 3;
        Console.WriteLine(Solution(c, stable)); // 출력: 3
    }
}