✅ 1. 재귀함수

using System;

class Program
{
    static void DFS(int L)
    {
        if (L == 0) return;
        DFS(L - 1);
        Console.WriteLine(L);
    }

    static void Main()
    {
        DFS(3);
    }
}





✅ 2. 이진수 출력 (재귀)

using System;

class Program
{
    static void DFS(int n, ref string answer)
    {
        if (n == 0) return;
        DFS(n / 2, ref answer);
        answer += (n % 2).ToString();
    }

    static string Solution(int n)
    {
        string answer = "";
        DFS(n, ref answer);
        return answer;
    }

    static void Main()
    {
        Console.WriteLine(Solution(11)); // 1011
    }
}





✅ 3. 이진트리 순회 (전위순회)

using System;

class Program
{
    static void DFS(int v, ref string answer)
    {
        if (v > 7) return;
        answer += v + " ";
        DFS(v * 2, ref answer);
        DFS(v * 2 + 1, ref answer);
    }

    static string Solution(int n)
    {
        string answer = "";
        DFS(n, ref answer);
        return answer;
    }

    static void Main()
    {
        Console.WriteLine(Solution(1)); // 1 2 4 5 3 6 7
    }
}





✅ 4. 부분집합 구하기

using System;
using System.Collections.Generic;

class Program
{
    static void DFS(int L, int n, int[] ch, List<string> answer)
    {
        if (L == n + 1)
        {
            string tmp = "";
            for (int i = 1; i <= n; i++)
                if (ch[i] == 1) tmp += i + " ";
            if (!string.IsNullOrEmpty(tmp))
                answer.Add(tmp);
        }
        else
        {
            ch[L] = 1;
            DFS(L + 1, n, ch, answer);
            ch[L] = 0;
            DFS(L + 1, n, ch, answer);
        }
    }

    static List<string> Solution(int n)
    {
        List<string> answer = new List<string>();
        int[] ch = new int[n + 1];
        DFS(1, n, ch, answer);
        return answer;
    }

    static void Main()
    {
        foreach (var s in Solution(3))
            Console.WriteLine(s);
    }
}





✅ 5. 합이 같은 부분집합

using System;
using System.Collections.Generic;
using System.Linq;

class Program
{
    static bool flag = false;
    static string answer = "NO";

    static void DFS(int L, int sum, int total, List<int> arr)
    {
        if (flag) return;
        if (L == arr.Count)
        {
            if (total - sum == sum)
            {
                answer = "YES";
                flag = true;
            }
        }
        else
        {
            DFS(L + 1, sum + arr[L], total, arr);
            DFS(L + 1, sum, total, arr);
        }
    }

    static string Solution(List<int> arr)
    {
        flag = false;
        answer = "NO";
        int total = arr.Sum();
        DFS(0, 0, total, arr);
        return answer;
    }

    static void Main()
    {
        var arr = new List<int> { 1, 3, 5, 6, 7, 10 };
        Console.WriteLine(Solution(arr)); // YES
    }
}





✅ 6. 바둑이 승차

using System;
using System.Collections.Generic;

class Program
{
    static int answer = int.MinValue;
    static int capacity = 0;

    static void DFS(int L, int sum, List<int> arr)
    {
        if (sum > capacity) return;
        if (L == arr.Count)
            answer = Math.Max(answer, sum);
        else
        {
            DFS(L + 1, sum + arr[L], arr);
            DFS(L + 1, sum, arr);
        }
    }

    static int Solution(int c, List<int> arr)
    {
        answer = int.MinValue;
        capacity = c;
        DFS(0, 0, arr);
        return answer;
    }

    static void Main()
    {
        var arr = new List<int> { 81, 58, 42, 33, 61 };
        Console.WriteLine(Solution(259, arr)); // 242
    }
}





✅ 7. 최대점수 구하기 (DFS + 제한 시간)

using System;
using System.Collections.Generic;

class Program
{
    static int answer = int.MinValue;

    static void DFS(int L, int sum, int time, int m, List<int> ps, List<int> pt)
    {
        if (time > m) return;
        if (L == ps.Count)
            answer = Math.Max(answer, sum);
        else
        {
            DFS(L + 1, sum + ps[L], time + pt[L], m, ps, pt);
            DFS(L + 1, sum, time, m, ps, pt);
        }
    }

    static int Solution(int m, List<int> ps, List<int> pt)
    {
        answer = int.MinValue;
        DFS(0, 0, 0, m, ps, pt);
        return answer;
    }

    static void Main()
    {
        var ps = new List<int> { 10, 25, 15, 6, 7 };
        var pt = new List<int> { 5, 12, 8, 3, 4 };
        Console.WriteLine(Solution(20, ps, pt)); // 41
    }
}





✅ 8. 중복순열

using System;
using System.Collections.Generic;

class Program
{
    static void DFS(int L, int n, int m, int[] tmp, List<List<int>> answer)
    {
        if (L == m)
            answer.Add(new List<int>(tmp));
        else
        {
            for (int i = 1; i <= n; i++)
            {
                tmp[L] = i;
                DFS(L + 1, n, m, tmp, answer);
            }
        }
    }

    static List<List<int>> Solution(int n, int m)
    {
        var answer = new List<List<int>>();
        var tmp = new int[m];
        DFS(0, n, m, tmp, answer);
        return answer;
    }

    static void Main()
    {
        var result = Solution(3, 2);
        foreach (var vec in result)
        {
            Console.WriteLine(string.Join(" ", vec));
        }
    }
}





✅ 9. 동전교환

using System;
using System.Collections.Generic;

class Program
{
    static int answer = int.MaxValue;

    static void DFS(int L, int sum, int m, List<int> coins)
    {
        if (sum > m || L >= answer) return;
        if (sum == m)
            answer = Math.Min(answer, L);
        else
        {
            foreach (var coin in coins)
            {
                DFS(L + 1, sum + coin, m, coins);
            }
        }
    }

    static int Solution(int m, List<int> coins)
    {
        answer = int.MaxValue;
        DFS(0, 0, m, coins);
        return answer;
    }

    static void Main()
    {
        var coins = new List<int> { 1, 2, 5 };
        Console.WriteLine(Solution(15, coins)); // 3
    }
}





✅ 10. 순열 구하기 (중복 없이)

using System;
using System.Collections.Generic;

class Program
{
    static void DFS(int L, int m, List<int> arr, int[] ch, int[] tmp, List<List<int>> answer)
    {
        if (L == m)
            answer.Add(new List<int>(tmp));
        else
        {
            for (int i = 0; i < arr.Count; i++)
            {
                if (ch[i] == 0)
                {
                    ch[i] = 1;
                    tmp[L] = arr[i];
                    DFS(L + 1, m, arr, ch, tmp, answer);
                    ch[i] = 0;
                }
            }
        }
    }

    static List<List<int>> Solution(int m, List<int> arr)
    {
        var answer = new List<List<int>>();
        int[] ch = new int[arr.Count];
        int[] tmp = new int[m];
        DFS(0, m, arr, ch, tmp, answer);
        return answer;
    }

    static void Main()
    {
        var arr = new List<int> { 3, 6, 9 };
        var result = Solution(2, arr);
        foreach (var vec in result)
        {
            Console.WriteLine(string.Join(" ", vec));
        }
    }
}





✅ 11. 팩토리얼

using System;

class Program
{
    static int DFS(int n)
    {
        if (n == 1) return 1;
        return n * DFS(n - 1);
    }

    static void Main()
    {
        Console.WriteLine(DFS(5)); // 120
    }
}





✅ 12. 조합수 (메모이제이션)

using System;

class Program
{
    static int[,] dy = new int[35, 35];

    static int DFS(int n, int r)
    {
        if (dy[n, r] > 0) return dy[n, r];
        if (n == r || r == 0) return 1;
        return dy[n, r] = DFS(n - 1, r - 1) + DFS(n - 1, r);
    }

    static void Main()
    {
        Console.WriteLine(DFS(5, 3)); // 10
    }
}





✅ 13. 수열 추측하기

using System;
using System.Collections.Generic;

class Program
{
    static int[,] comb = new int[11, 11];
    static int[] b = new int[11];
    static int[] p = new int[11];
    static bool[] used = new bool[11];
    static bool found = false;

    static int Comb(int n, int r)
    {
        if (comb[n, r] > 0) return comb[n, r];
        if (n == r || r == 0) return 1;
        return comb[n, r] = Comb(n - 1, r - 1) + Comb(n - 1, r);
    }

    static void DFS(int L, int sum, int n, int f, List<int> answer)
    {
        if (found) return;
        if (L == n)
        {
            if (sum == f)
            {
                found = true;
                for (int i = 0; i < n; i++) answer.Add(p[i]);
            }
        }
        else
        {
            for (int i = 1; i <= n; i++)
            {
                if (!used[i])
                {
                    used[i] = true;
                    p[L] = i;
                    DFS(L + 1, sum + b[L] * p[L], n, f, answer);
                    used[i] = false;
                }
            }
        }
    }

    static List<int> FindPermutation(int n, int f)
    {
        List<int> answer = new List<int>();
        for (int i = 0; i < n; i++) b[i] = Comb(n - 1, i);
        DFS(0, 0, n, f, answer);
        return answer;
    }

    static void Main()
    {
        var result = FindPermutation(4, 16);
        Console.WriteLine(string.Join(" ", result)); // 3 1 2 4
    }
}





✅ 14. 조합 구하기

using System;
using System.Collections.Generic;

class Program
{
    static void DFS(int L, int s, int n, int m, int[] tmp, List<List<int>> answer)
    {
        if (L == m)
            answer.Add(new List<int>(tmp));
        else
        {
            for (int i = s; i <= n; i++)
            {
                tmp[L] = i;
                DFS(L + 1, i + 1, n, m, tmp, answer);
            }
        }
    }

    static List<List<int>> Solution(int n, int m)
    {
        var answer = new List<List<int>>();
        var tmp = new int[m];
        DFS(0, 1, n, m, tmp, answer);
        return answer;
    }

    static void Main()
    {
        var result = Solution(4, 2);
        foreach (var vec in result)
        {
            Console.WriteLine(string.Join(" ", vec));
        }
    }
}





✅ 15. 수들의 조합

using System;
using System.Collections.Generic;

class Program
{
    static int answer = 0;

    static void DFS(int L, int s, int sum, int k, int m, List<int> arr)
    {
        if (L == k)
        {
            if (sum % m == 0) answer++;
        }
        else
        {
            for (int i = s; i < arr.Count; i++)
                DFS(L + 1, i + 1, sum + arr[i], k, m, arr);
        }
    }

    static int Solution(int n, int k, List<int> arr, int m)
    {
        answer = 0;
        DFS(0, 0, 0, k, m, arr);
        return answer;
    }

    static void Main()
    {
        var arr = new List<int> { 2, 4, 5, 8, 12 };
        Console.WriteLine(Solution(5, 3, arr, 6)); // 2
    }
}