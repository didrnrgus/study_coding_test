//////////////////////////////////////////////////////////////////
✅ 1. 세 수 중 최솟값
#include <iostream>

int solution(int a, int b, int c)
{
	int answer = (a < b) ? a : b;
	if (c < answer)
		answer = c;
	return answer;
}

int main()
{
	cout << solution(2, 5, 1) << endl;
	return 0;
}

//////////////////////////////////////////////////////////////////
✅ 2. 삼각형 판별하기
// 나의 풀이
#include <iostream>

string solution(int a, int b, int c)
{
	// 밑면 > 나머지 두개
	// 밑면은 젤 큰값
	// 나머지는 두개 = 전체합 - 밑면
	int max_val = max(a, max(b, c));
	int total = a + b + c;
	return (total - max_val > max_val) ? "YES" : "NO";
}

int main()
{
	cout << solution(13, 33, 17) << endl;
	return 0;
}

//////////////////////////////////////////////////////////////////
✅ 3. 연필개수
#include <iostream>

int solution(int n)
{
	return (n + 11) / 12;
}

int main()
{
	cout << solution(178) << endl;
	return 0;
}

// 나의 풀이
#include <iostream>

int solution(int a)
{
	// 1명 이더라도 1다스가 필요하다
	// 1명일 경우에는 1명 +11 해줘야 1다스가 나옴.
	int result = 0;
	result = (a + 11) / 12;
	return result;
}

int main()
{
	auto result = solution(12);
	std::cout << result << "\n";
	return 0;
}

//////////////////////////////////////////////////////////////////
✅ 4. 1부터 N까지의 합
#include <iostream>

int solution(int n)
{
	int answer = 0;
	for (int i = 1; i <= n; ++i)
	{
		answer += i;
	}
	return answer;
}

int main()
{
	cout << solution(10) << endl;
	return 0;
}

// 나의 풀이
#include <iostream>

int solution(int a)
{
	// 맨처음 과 , 맨끝 더해
	// 더한거 * 나눈값

	int result = 0;
	int first_end_sum = 1 + a;
	int divied = a / 2;
	int rest = a % 2;

	result = first_end_sum * divied;

	if (rest > 0)
		result += rest + divied;

	return result;

	// 등차수열 공식을 하면 더 간편하게 구해짐.
	// return (1 + a) * a / 2;
}

int main()
{
	auto result = solution(4);
	std::cout << result << "\n";
	return 0;
}

//////////////////////////////////////////////////////////////////
✅ 5. 최솟값 구하기
#include <iostream>
#include <vector>
#include <climits>

int solution(const vector<int> &arr)
{
	int min_val = INT_MAX;
	for (int x : arr)
	{
		if (x < min_val)
			min_val = x;
	}
	return min_val;
}

int main()
{
	vector<int> arr =
	{ 5, 7, 1, 3, 2, 9, 11 };
	cout << solution(arr) << endl;
	return 0;
}

// 나의 풀이
#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>

int solution(const std::vector<int>& arr)
{
	int minVal = INT_MAX; // #include <climits>
	for (int a : arr)
	{
		minVal = std::min(minVal, a); // #include <algorithm>
	}

	return minVal;
}

int main()
{
	std::vector<int> arr =
	{ 5, 7, 1, 3, 2, 9, 11 };
	std::cout << solution(arr) << std::endl;
	return 0;
}

//////////////////////////////////////////////////////////////////
✅ 6. 홀수
#include <iostream>
#include <vector>
#include <climits>

pair<int, int> solution(const vector<int>& arr)
{
	int sum = 0, min_val = INT_MAX;
	for (int x : arr)
	{
		if (x % 2 == 1)
		{
			sum += x;
			if (x < min_val)
				min_val = x;
		}
	}
	return { sum, min_val };
}

int main()
{
	vector<int> arr =
	{ 12, 77, 38, 41, 53, 92, 85 };
	auto result = solution(arr);
	cout << result.first << endl
		<< result.second << endl;
	return 0;
}

// 나의 풀이
#include <iostream>
#include <vector>
#include <utility>
#include <climits>
#include <algorithm>

/*
✅ 현재 사용한 기능별 헤더 분석
기능 사용	필요한 헤더	포함 여부
std::cout, std::endl		<iostream>	✅ 있음
std::vector					<vector>	✅ 있음
std::pair, std::make_pair	<utility>	❌ 없음 → 추가 필요
INT_MAX						<climits>	❌ 없음 → 추가 필요
std::min()					<algorithm>	❌ 없음 → 추가 필요
*/
std::pair<int, int> solution(const std::vector<int>& arr)
{
	std::pair<int, int> result = std::make_pair(0, 0);
	int oddVal = INT_MAX;

	for (int a : arr)
	{
		if (a % 2 == 1)
		{
			result.first += a;
			oddVal = std::min(oddVal, a);
		}
	}

	result.second = oddVal;
	return result;
}

int main()
{
	std::vector<int> arr =
	{ 12, 77, 38, 41, 53, 92, 85 };
	auto result = solution(arr);
	std::cout << result.first << std::endl
		<< result.second << std::endl;
	return 0;
}

//////////////////////////////////////////////////////////////////
✅ 7. 10부제
#include <iostream>
#include <vector>

int solution(int day, const vector<int> &arr)
{
	int count = 0;
	for (int x : arr)
	{
		if (x % 10 == day)
			++count;
	}
	return count;
}

int main()
{
	vector<int> arr =
	{ 25, 23, 11, 47, 53, 17, 33 };
	cout << solution(3, arr) << endl;
	return 0;
}

// 나의 풀이
#include <iostream>
#include <vector>

int solution(int day, const std::vector<int>& arr)
{
	// 차번호 일의자리 숫자와 , 날짜의 일의자리 숫자가 일치하면
	// -> 운행 금지
	// 10부제 위반하는 차량의 대수
	int day_van_num = day % 10;
	int count = 0;

	for (int a : arr)
	{
		if (day_van_num != a % 10)
			count++;
	}

	return count;
}

int main()
{
	std::vector<int> arr =
	{ 12, 20, 54, 30, 87, 91, 30 };
	std::cout << solution(0, arr) << std::endl;
	return 0;
}

//////////////////////////////////////////////////////////////////
✅ 8. 일곱난쟁이
// 조합 + 합검사
#include <iostream>
#include <vector>
#include <numeric>

vector<int> solution(vector<int> arr)
{
	int sum = accumulate(arr.begin(), arr.end(), 0);
	for (int i = 0; i < arr.size(); ++i)
	{
        // 아예 시작을 i 보다 크게 시작 함.
		for (int j = i + 1; j < arr.size(); ++j)
		{
			if (sum - arr[i] - arr[j] == 100)
			{
				// 큰 인덱스인가? -> 먼저지워야 함.
				arr.erase(arr.begin() + j);
				arr.erase(arr.begin() + i);
				return arr;
			}
		}
	}
	return arr;
}

int main()
{
	vector<int> arr =
	{ 20, 7, 23, 19, 10, 15, 25, 8, 13 };
	vector<int> result = solution(arr);
	for (int x : result)
		cout << x << " ";
	cout << endl;
	return 0;
}

// 나의 풀이
#include <iostream>
#include <vector>
#include <numeric>

std::vector<int> solution(std::vector<int> arr)
{
	// 난장이들의 키의 합이 -> 100
	// 결과적으로 두개 뺴야해
	// 나머진 합이 100 된대
	// 두개 씩 빼보고 100이 되면 그게 맞는거
	int sum = std::accumulate(arr.begin(), arr.end(), 0);
	int remove_sum = sum - 100;

	for (int i = 0; i < arr.size(); i++)
	{
		for (int j = 0; j < arr.size(); j++)
		{
			if (i == j)
				continue;

			if (arr[i] + arr[j] == remove_sum)
			{
				// arr.erase(arr.begin() + i);
				// arr.erase(arr.begin() + j);

				// 큰 인덱스 먼저 지워야 함.
				if (i > j)
				{
					arr.erase(arr.begin() + i);
					arr.erase(arr.begin() + j);
				}
				else
				{
					arr.erase(arr.begin() + j);
					arr.erase(arr.begin() + i);
				}

				int check = std::accumulate(arr.begin(), arr.end(), 0);
				return arr;
			}
		}
	}

	return arr;
}

int main()
{
	std::vector<int> arr =
	{ 20, 7, 23, 19, 10, 15, 25, 8, 13 };
	std::vector<int> result = solution(arr);
	for (int x : result)
		std::cout << x << " ";
	std::cout << std::endl;
	return 0;
}

//////////////////////////////////////////////////////////////////
✅ 9. A를 #으로
#include <iostream>
#include <string>

string solution(string s)
{
	for (char& c : s)
	{
		if (c == 'A')
			c = '#';
	}
	return s;
}

int main()
{
	string str = "BANANA";
	cout << solution(str) << endl;
	return 0;
}

// 나의 풀이
#include <iostream>
#include <string>

/*
* 이거 좀 신기하네
int main() {
	std::string s = "ABC\0DEF";  // 총 7글자 ('\0' 포함)
	std::cout << "size: " << s.size() << "\n";      // 출력: 7
	std::cout << "length: " << s.length() << "\n";  // 출력: 7
	std::cout << "c_str(): " << s.c_str() << "\n";  // 출력: ABC
}
*/

std::string solution(std::string s)
{
	// .size() .length() 차이 없고
	// '\n' 포함 하지 않음.
	int len = s.length();

	for (int i = 0; i < len; i++)
	{
		if ('A' == s[i])
			s[i] = '#';
	}

	return s;
}

int main()
{
	std::string str = "BANANA";
	std::cout << solution(str) << std::endl;
	return 0;
}

//////////////////////////////////////////////////////////////////
✅ 10. 문자 찾기
#include <iostream>
#include <string>

int solution(const string & s, char t)
{
	int count = 0;
	for (char c : s)
	{
		if (c == t)
			++count;
	}
	return count;
}

int main()
{
	string str = "COMPUTERPROGRAMMING";
	cout << solution(str, 'R') << endl;
	return 0;
}

// 나의 풀이
#include <iostream>
#include <string>

int solution(const std::string& s, char t)
{
	int result = 0;
	for (int i = 0; i < s.size(); i++)
	{
		if (s[i] == t)
		{
			result++;
		}
	}

	return result;
}

int main()
{
	std::string str = "COMPUTERPROGRAMMING";
	std::cout << solution(str, 'R') << std::endl;
	return 0;
}

//////////////////////////////////////////////////////////////////
✅ 11. 대문자 찾기
#include <iostream>
#include <string>
#include <cctype>

int solution(const string & s)
{
	int count = 0;
	for (char c : s)
	{
		if (isupper(c))
			++count;
	}
	return count;
}

int main()
{
	string str = "KoreaTimeGood";
	cout << solution(str) << endl;
	return 0;
}

//////////////////////////////////////////////////////////////////
✅ 12. 대문자로 통일
#include <iostream>
#include <string>

string solution(const string & s)
{
	string answer;
	for (char c : s)
	{
		if (islower(c))
			answer += toupper(c);
		else
			answer += c;
	}
	return answer;
}

int main()
{
	string str = "ItisTimeToStudy";
	cout << solution(str) << endl;
	return 0;
}

// 나의 풀이
#include <iostream>
#include <string>
#include <cctype>

std::string solution(const std::string& s)
{
	// 빈거니까 인덱스로 접근하면 안됨.
	std::string result;

	for (int i = 0; i < s.size(); i++)
	{
		if (islower(s[i]))
		{
			// 빈거니까 인덱스로 접근하면 안됨.
			result += toupper(s[i]);
		}
		else
		{
			// 빈거니까 인덱스로 접근하면 안됨.
			result += s[i];
		}
	}

	return result;
}

int main()
{
	std::string str = "ItisTimeToStudy";
	std::cout << solution(str) << std::endl;
	return 0;
}

//////////////////////////////////////////////////////////////////
✅ 13. 대소문자 변환
#include <iostream>
#include <string>

string solution(const string & s)
{
	string answer;
	for (char c : s)
	{
		if (isupper(c))
			answer += tolower(c);
		else
			answer += toupper(c);
	}
	return answer;
}

int main()
{
	cout << solution("StuDY") << endl;
	return 0;
}

//////////////////////////////////////////////////////////////////
✅ 14. 가장 긴 문자열
#include <iostream>
#include <vector>
#include <string>

string solution(const vector<string> &s)
{
	string answer;
	size_t max_len = 0;
	for (const string& str : s)
	{
		if (str.length() > max_len)
		{
			max_len = str.length();
			answer = str;
		}
	}
	return answer;
}

int main()
{
	vector<string> str =
	{ "teacher", "time", "student", "beautiful", "good" };
	cout << solution(str) << endl;
	return 0;
}

// 나의 풀이
#include <iostream>
#include <vector>
#include <string>

std::string solution(const std::vector<std::string>& s)
{
	int maxIndex = 0;
	int maxSize = 0;

	for (int i = 0; i < s.size(); i++)
	{
		if (s[i].size() > maxSize)
		{
			maxSize = s[i].size();
			maxIndex = i;
		}
	}

	return s[maxIndex];
}

int main()
{
	std::vector<std::string> str =
	{ "teacher", "time", "student", "beautiful", "good" };
	std::cout << solution(str) << std::endl;
	return 0;
}

//////////////////////////////////////////////////////////////////
✅ 15. 가운데 문자 출력
#include <iostream>
#include <string>

string solution(const string & s)
{
	int mid = s.length() / 2;
	if (s.length() % 2 == 1)
		return s.substr(mid, 1);
	else
		return s.substr(mid - 1, 2);
}

int main()
{
	cout << solution("study") << endl;
	return 0;
}

// 나의 풀이
#include <iostream>
#include <string>

std::string solution(const std::string& s)
{
	// 홀수면 가운데 문자
	// 짝수면 가운데 2개 6-> 3 4
	std::string center;

	int centerIndex = s.size() / 2;

	if (s.size() % 2 == 0)
	{
		center += s[centerIndex - 1];
		center += s[centerIndex];
	}
	else
	{
		center += s[centerIndex];
	}

	return center;
}

int main()
{
	std::cout << solution("study") << std::endl;
	return 0;
}

//////////////////////////////////////////////////////////////////
✅ 16. 중복문자제거
#include <iostream>
#include <string>

string solution(const string & s)
{
	string answer;
	for (size_t i = 0; i < s.length(); ++i)
	{
		if (s.find(s[i]) == i)
		{
			answer += s[i];
		}
	}
	return answer;
}

int main()
{
	cout << solution("ksekkset") << endl;
	return 0;
}

// 나의 풀이
#include <iostream>
#include <string>

/*
size_t find(const std::string& target, size_t pos = 0) const;
size_t find(char ch, size_t pos = 0) const;

std::string s = "banana";
size_t pos = s.find('a'); // 첫 번째 'a'는 인덱스 1에 있음

std::string s = "hello world";
size_t pos = s.find("world"); // "world"는 인덱스 6부터 시작

std::string s = "banana";
size_t pos = s.find('a', 2); // 인덱스 2부터 'a'를 찾음

문자 또는 문자열이 어디에 있는지 인덱스로 반환
못 찾으면 std::string::npos 반환
std::string::npos == -1
*/

/*
std::set<int> s;
s.insert(5);
s.insert(2);
s.insert(8);

저장 순서와 관계없이 내부에서는 자동 정렬됨
위 코드 실행 후 s는: 2, 5, 8 ← 정렬된 상태로 저장됨
*/
std::string solution(const std::string& s)
{
	std::string result;

	for (int i = 0; i < s.size(); i++)
	{
		// 인덱스 지정을 안해서 처음부터 찾음.. -> 계속.
		if (s.find(s[i]) == i)
		{
			result += s[i];
		}
	}

	return result;
}

int main()
{
	std::cout << solution("ksekkset") << std::endl;
	return 0;
}

//////////////////////////////////////////////////////////////////
✅ 17. 중복단어제거
#include <iostream>
#include <vector>
#include <string>
#include <algorithm> // for std::find

std::vector<std::string> solution(const std::vector<std::string>& input) {
    std::vector<std::string> result;

    for (const auto& str : input) {
        if (std::find(result.begin(), result.end(), str) == result.end()) {
            result.push_back(str);
        }
    }

    return result;
}

int main()
{
	std::vector<std::string> str =
	{ "good", "time", "good", "time", "student" };

	std::vector<std::string> result = solution(str);

	for (const std::string& word : result)
	{
		std::cout << word << " ";
	}
	std::cout << std::endl;

	return 0;
}

// 나의 풀이
#include <iostream>
#include <vector>
#include <string>

/*
std::find(begin, end, value);
begin, end: 탐색 범위 (iterator)
value: 찾고 싶은 값
리턴값: 찾으면 해당 위치의 iterator, 못 찾으면 end 반환

std::find(s.begin(), s.begin() + i, s[i]);

std::find(s.begin(), s.begin() + 0, s[0]); // i == 0일 때는:
std::find(s.begin(), s.begin(), s[0]);

🔍 무슨 일이 일어나나?
범위가 s.begin()에서 s.begin()까지입니다.
즉, begin == end가 되어 탐색 범위가 아예 없음
따라서 std::find는 아무것도 검사하지 않고 바로 end 반환
*/

std::vector<std::string> solution(const std::vector<std::string>& s)
{
	std::vector<std::string> answer;

	for (std::size_t i = 0; i < s.size(); ++i)
	{
		// i 가 0 일때 begin이랑 end가 같기때문에, 탐색 범위가 없다.
		// 그래서 std::find()가 아무것도 검사하지 않고 바로 end 반환
		if (std::find(s.begin(), s.begin() + i, s[i]) == s.begin() + i)
		{
			answer.push_back(s[i]);
		}
	}

	return answer;
}

int main()
{
	std::vector<std::string> str =
	{ "good", "time", "good", "time", "student" };

	std::vector<std::string> result = solution(str);

	for (const std::string& word : result)
	{
		std::cout << word << " ";
	}

	std::cout << std::endl;
	return 0;
}

/* gpt
#include <iostream>
#include <vector>
#include <string>
#include <unordered_set>

std::vector<std::string> solution(const std::vector<std::string>& s)
{
	std::unordered_set<std::string> seen;
	std::vector<std::string> result;

	for (const std::string& word : s)
	{
		// set 에 달아 놓은것을 보고있다.
		if (seen.find(word) == seen.end())
		{
			seen.insert(word);       // 중복 체크용
			result.push_back(word);  // 순서 유지
		}
	}

	return result;
}

*/
