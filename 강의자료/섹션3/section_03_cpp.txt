//////////////////////////////////////////////////////////////////
✅ 1. 회문 문자열
#include <iostream>
#include <string>
#include <cctype>

std::string solution(const std::string& s) 
{
    std::string lower;
    for (char c : s) 
    {
        lower += std::tolower(c);
    }

    int len = static_cast<int>(lower.length());
    for (int i = 0; i < len / 2; ++i) 
    {
        if (lower[i] != lower[len - i - 1]) return "NO";
    }

    return "YES";
}

int main() 
{
    std::string str = "goooG";
    std::cout << solution(str) << std::endl;
    return 0;
}


// #######################나의 풀이
#include <iostream>
#include <string>
#include <cctype>

std::string solution(const std::string& s)
{
    std::string result;
    int size = s.size();

    for (int i = 0; i < size / 2; i++)
    {
        if(toupper(s[i]) != toupper(s[size-1-i]))
            return "NO";
    }

    return "YES";
}

int main()
{
    std::string str = "goooG";
    std::cout << solution(str) << std::endl;
    return 0;
}


//////////////////////////////////////////////////////////////////
✅ 2. 유효한 팰린드롬
#include <iostream>
#include <string>
#include <cctype>

std::string solution(const std::string& s) 
{
    std::string cleaned;
    for (char c : s) 
    {
        if (std::isalpha(c)) cleaned += std::tolower(c);
    }

    int len = static_cast<int>(cleaned.length());
    for (int i = 0; i < len / 2; ++i) 
    {
        if (cleaned[i] != cleaned[len - i - 1]) return "NO";
    }

    return "YES";
}

int main() 
{
    std::string str = "found7, time: study; Yduts; emit, 7Dnuof";
    std::cout << solution(str) << std::endl;
    return 0;
}

// #######################나의 풀이
#include <iostream>
#include <string>
#include <cctype>

/*
    std::isalpha(c))
    알파뱃인지 아닌지 판별함.
*/
std::string solution(const std::string& s)
{
    std::string removed;
    for (int i = 0; i < s.size(); i++)
    {
        if (std::isalpha(s[i]))
        {
            removed += std::tolower(s[i]);
        }
    }

    int size = removed.size();

    for (int i = 0; i < size / 2; i++)
    {
        if (removed[i] != removed[size - 1 - i])
        {
            return "NO";
        }
    }

    return "YES";
}

int main()
{
    std::string str = "found7, time: study; Yduts; emit, 7Dnuof";
    std::cout << solution(str) << std::endl;
    return 0;
}


//////////////////////////////////////////////////////////////////
✅ 3. 숫자만 추출
#include <iostream>
#include <string>
#include <cctype>

int solution(const std::string& str) 
{
    std::string digits;
    for (char c : str) 
    {
        if (std::isdigit(c)) digits += c;
    }
    return std::stoi(digits);
}

int main() 
{
    std::string str = "g0en2T0s8eSoft";
    std::cout << solution(str) << std::endl;
    return 0;
}


// #######################나의 풀이
#include <iostream>
#include <string>
#include <cctype>

/*
    std::isDigit(c)     // 숫자인지
    std::stoi(dgits)    // 스트링 -> 숫자 
*/
int solution(const std::string& str)
{
    std::string numStr;

    for (int i = 0; i < str.size(); i++)
    {
        if (isdigit(str[i]))
        {
            numStr += str[i];
        }
    }

    return std::stoi(numStr);
}

int main()
{
    std::string str = "g0en2T0s8eSoft";
    std::cout << solution(str) << std::endl;
    return 0;
}

//////////////////////////////////////////////////////////////////
✅ 4. 가장 짧은 문자거리
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

std::vector<int> solution(const std::string& s, char t) 
{
    std::vector<int> answer(s.length());
    int p = 1000;

    for (std::size_t i = 0; i < s.length(); ++i) 
    {
        if (s[i] == t) p = 0;
        else ++p;
        answer[i] = p;
    }

    p = 1000;
    for (int i = static_cast<int>(s.length()) - 1; i >= 0; --i) 
    {
        if (s[i] == t) p = 0;
        else ++p;
        answer[i] = std::min(answer[i], p);
    }

    return answer;
}

int main() 
{
    std::string str = "teachermode";
    char target = 'e';
    std::vector<int> result = solution(str, target);
    for (int x : result) std::cout << x << " ";
    std::cout << std::endl;
    return 0;
}


// #######################나의 풀이
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

std::vector<int> solution(const std::string& s, char t)
{
    // 현재 갹 t 위치를 알아낸다.
    // 1 2 1 2 3 4 1 2 3 4 5
    // 내가 그냥 풀어본것 코드 x
    // 왼쪽에서 오른쪽으로 훑고
    // 오른쪽에서 왼쪽으로 훑고

    std::vector<int> result(s.size());
    int size = s.size();
    int a = 0;

    for (int i = 0; i < size; i++)
    {
        if (t == s[i])
        {
            a = 0;
        }
        else {
            a++;
        }
        result[i] = a;
    }

    a = 0;

    for (int i = size - 1; i >= 0; i--)
    {
        if (t == s[i])
        {
            a = 0;
        }
        else {
            a++;
        }

        result[i] = result[i] > a ? a : result[i];
    }

    return result;
}

int main()
{
    std::string str = "teachermode";
    char target = 'e';
    std::vector<int> result = solution(str, target);
    for (int x : result) std::cout << x << " ";
    std::cout << std::endl;
    return 0;
}

//////////////////////////////////////////////////////////////////
✅ 5. 문자열 압축
#include <iostream>
#include <string>

std::string solution(const std::string& s) 
{
    std::string result;
    int cnt = 1;
    std::string str = s + ' ';

    for (std::size_t i = 0; i < str.length() - 1; ++i) 
    {
        if (str[i] == str[i + 1]) ++cnt;
        else 
        {
            result += str[i];
            if (cnt > 1) result += std::to_string(cnt);
            cnt = 1;
        }
    }

    return result;
}

int main() 
{
    std::string str = "KKHSSSSSSSE";
    std::cout << solution(str) << std::endl;
    return 0;
}


// #######################나의 풀이
#include <iostream>
#include <string>


std::string solution(const std::string& s)
{
    char curChar = '\n';
    int curCount = 0;
    std::string result;
    
    result += s[0];
    curChar = s[0];
    curCount = 1;

    for (int i = 1; i < s.size(); i++)
    {
        if (s[i] == curChar)
        {
            curCount++;

            // 라스트?
            if (i == s.size() - 1)
            {
                // 기존꺼 저장해줌.
                if (curCount > 1)
                    result += std::to_string(curCount);
            }
        }
        else 
        {
            // 새로운거

            // 기존꺼 저장해줌.
            if(curCount >1)
                result += std::to_string(curCount);
            
            // 새로운거 저장.
            result += s[i];

            // 새로운거 세팅.
            curChar = s[i];
            curCount = 1;
        }
    }


    return result;
}

int main()
{
    std::string str = "KKHSSSSSSSEE";
    std::cout << solution(str) << std::endl;
    return 0;
}
