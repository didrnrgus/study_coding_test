✅ 1. 경로탐색 (DFS - 인접행렬)

using System;
using System.Collections.Generic;

class Program
{
    /*
        1 2 3 4 5
        1 2 5
        1 3 4 2 5
        1 3 4 5
        1 4 2 5
        1 4 5
        총 6 가지입니다.
    */
    static int answer = 0;
    static int[,] graph; // 인접행렬
    static int[] ch;
    static int n;

    static void DFS(int v)
    {
        // 도착 했는지.
        if (v == n)
        {
            answer++;
        }
        else
        {
            for (int i = 1; i <= n; i++)
            {
                // 이동이 가능한 간선이고, && 내가 지나왔던자리가 아니어야 함.
                if (graph[v, i] == 1 && ch[i] == 0)
                {
                    ch[i] = 1;
                    DFS(i);
                    ch[i] = 0;
                }
            }
        }
    }

    static int Solution(int nodes, List<(int, int)> edges)
    {
        // 5
        n = nodes;

        // 인접행렬 인스턴스. 노드 번호로 체크예정이므로, 인덱스 하나 더.
        graph = new int[n + 1, n + 1];

        // 노드 번호로 체크예정이므로, 인덱스 하나 더.
        ch = new int[n + 1];

        // 이동 가능한곳에 1로 체크
        foreach (var (from, to) in edges)
            graph[from, to] = 1;

        // 현재 출발지니까 자나간 곳으로 체크.
        ch[1] = 1;
        DFS(1);

        return answer;
    }

    static void Main()
    {
        var arr = new List<(int, int)>
        {
            (1, 2), (1, 3), (1, 4), (2, 1), (2, 3), (2, 5),
            (3, 4), (4, 2), (4, 5)
        };
        Console.WriteLine(Solution(5, arr));
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;

class Program
{
    /*
        1 2 3 4 5
        1 2 5
        1 3 4 2 5
        1 3 4 5
        1 4 2 5
        1 4 5
        총 6 가지입니다.
    */
    //static List<List<int>> graphList;   // 인접리스트
    static int[,] graphMat;             // 인접행렬

    static int[] check;
    static int answer = 0;


    static void DFS(int curNode, int finishNode)
    {
        if(curNode == finishNode)
        {
            answer++;
            return;
        }

        for (int i = 1; i <= finishNode; i++)
        {
            if (graphMat[curNode, i] == 1 && check[i] == 0)
            {
                check[i] = 1;
                DFS(i, finishNode);
                check[i] = 0;
            }
        }
    }


    static int Solution(int nodes, List<(int, int)> edges)
    {
        // 인접행렬 초기화
        graphMat = new int[nodes + 1, nodes + 1];

        foreach ((int from, int to) node in edges)
        {
            graphMat[node.from, node.to] = 1;
        }

        // check
        check = new int[nodes + 1];
        check[1] = 1;

        DFS(1, nodes);

        int result = answer;
        return answer;
    }

    static void Main()
    {
        var arr = new List<(int, int)>
        {
            (1, 2), (1, 3), (1, 4), (2, 1), (2, 3), (2, 5),
            (3, 4), (4, 2), (4, 5)
        };
        Console.WriteLine(Solution(5, arr));
    }
}



✅ 2. 경로탐색 (DFS - 인접리스트)

using System;
using System.Collections.Generic;

class Program
{
    /*
        1 2 3 4 5
        1 2 5
        1 3 4 2 5
        1 3 4 5
        1 4 2 5
        1 4 5
        총 6 가지입니다.
    */
    static int answer = 0;
    static List<int>[] graph;   // 인접리스트
    static int[] ch;
    static int n;               // 도착지점 노드 넘버

    static void DFS(int v)
    {
        if (v == n)
        {
            answer++;
        }
        else
        {
            // 인접리스트 -> 각 노드의 경로를 따라서 목적지를 찾아 감.
            // 있을수도 있고 없을 수도 있음.
            // 없으면 뺑뺑이 돌다가 리턴되겠지.
            foreach (int nv in graph[v])
            {
                if (ch[nv] == 0)
                {
                    ch[nv] = 1;
                    DFS(nv);
                    ch[nv] = 0;
                }
            }
        }
    }

    static int Solution(int nodes, List<(int, int)> edges)
    {
        // 도착지점이 어딘지. 5
        n = nodes;

        // 인접리스트 세팅. 노드 넘버로 편하게하려고 인덱스 하나 더
        graph = new List<int>[n + 1];

        // 일단 각 노드에서 경로 추가 하기 전
        // -> 리스트만 생성해놓음 Add 아직 안했다.
        for (int i = 0; i <= n; i++)
            graph[i] = new List<int>();

        // 내가 지나온 길 체크하기위해 -> 이것도 편의를 위해 인덱스 하나 더 함.
        ch = new int[n + 1];

        // 입력데이터를 적용시킨다.
        foreach (var (from, to) in edges)
            graph[from].Add(to);

        // 내가왔던자리 1부터 시작하니 체크
        ch[1] = 1;
        DFS(1);

        return answer;
    }

    static void Main()
    {
        var arr = new List<(int, int)>
        {
            (1, 2), (1, 3), (1, 4), (2, 1), (2, 3), (2, 5),
            (3, 4), (4, 2), (4, 5)
        };
        Console.WriteLine(Solution(5, arr));
    }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;

class Program
{
    /*
        1 2 3 4 5
        1 2 5
        1 3 4 2 5
        1 3 4 5
        1 4 2 5
        1 4 5
        총 6 가지입니다.
    */
    static List<List<int>> graphList;   // 인접리스트
    //static int[,] graphMat;

    static int[] check;
    static int answer = 0;

    static void DFS(int curNodeNum, int finishNodeNum)
    {
        if (curNodeNum == finishNodeNum)
        {
            answer++;
            return;
        }

        for (int i = 0; i < graphList[curNodeNum].Count; i++)
        {
            if (check[graphList[curNodeNum][i]] == 0)
            {
                check[curNodeNum] = 1;
                DFS(graphList[curNodeNum][i], finishNodeNum);

                check[curNodeNum] = 0;
            }
        }
    }

    static int Solution(int nodes, List<(int, int)> edges)
    {
        // 인접리스트부터 작성
        graphList = new List<List<int>>();
        for (int i = 0; i <= nodes; i++)
        {
            graphList.Add(new List<int>());
        }

        for (int i = 0; i < edges.Count; i++)
        {
            if (graphList[edges[i].Item1] != null)
                graphList[edges[i].Item1].Add(edges[i].Item2);
        }

        // 체크 초기화
        check = new int[nodes + 1];
        check[1] = 1;

        DFS(1, nodes);
        int result = answer;
        return result;
    }

    static void Main()
    {
        var arr = new List<(int, int)>
        {
            (1, 2), (1, 3), (1, 4), (2, 1), (2, 3), (2, 5),
            (3, 4), (4, 2), (4, 5)
        };
        Console.WriteLine(Solution(5, arr));
    }
}






✅ 3. 미로탐색 (DFS)

using System;
using System.Collections.Generic;

class Program
{
    /*
         체크 행렬을 따로둬야하나 했는데
         그냥 board 에 적어놓아도 되겠네
    */
    static int answer = 0;
    static int[,] dxdy = { { -1, 0 }, { 0, 1 }, { 1, 0 }, { 0, -1 } };

    static void DFS(int x, int y, int[,] board)
    {
        if (x == 6 && y == 6)
        {
            answer++;
        }
        else
        {
            for (int k = 0; k < 4; k++)
            {
                int nx = x + dxdy[k, 0];
                int ny = y + dxdy[k, 1];
                if (nx >= 0 && nx <= 6 && ny >= 0 && ny <= 6 && board[nx, ny] == 0)
                {
                    board[nx, ny] = 1;
                    DFS(nx, ny, board);
                    board[nx, ny] = 0;
                }
            }
        }
    }

    static int Solution(int[,] board)
    {
        board[0, 0] = 1;
        DFS(0, 0, board);
        return answer;
    }

    static void Main()
    {
        int[,] arr = {
            {0,0,0,0,0,0,0},
            {0,1,1,1,1,1,0},
            {0,0,0,1,0,0,0},
            {1,1,0,1,0,1,1},
            {1,1,0,0,0,0,1},
            {1,1,0,1,1,0,0},
            {1,0,0,0,0,0,0}
        };
        Console.WriteLine(Solution(arr));
    }
}


using System;

class Program
{
    static int answer = 0;
    static int[,] dxdy = { { -1, 0 }, { 0, 1 }, { 1, 0 }, { 0, -1 } };

    static void DFS(int x, int y, int[,] board)
    {
        if (x == 6 && y == 6)
        {
            answer++;
            return;
        }

        for (int i = 0; i < 4; i++)
        {
            int testX = x + dxdy[i, 0];
            int testY = y + dxdy[i, 1];

            if (testX >= 0 && testX <= 6 
                && testY >= 0 && testY <= 6
                && board[testX, testY] == 0)
            {
                board[testX, testY] = 1;

                DFS(testX, testY, board);
                board[testX, testY] = 0;
            }
        }
    }

    static int Solution(int[,] board)
    {
        board[0, 0] = 1;
        DFS(0, 0, board);
        return answer;
    }

    static void Main()
    {
        int[,] arr = {
            {0,0,0,0,0,0,0},
            {0,1,1,1,1,1,0},
            {0,0,0,1,0,0,0},
            {1,1,0,1,0,1,1},
            {1,1,0,0,0,0,1},
            {1,1,0,1,1,0,0},
            {1,0,0,0,0,0,0}
        };
        Console.WriteLine(Solution(arr));
    }
}


✅ 4. 이진트리 넓이우선탐색 (BFS)

using System;
using System.Collections.Generic;

class Program
{
    static string Solution()
    {
        string answer = "";
        Queue<int> q = new Queue<int>();
        q.Enqueue(1);

        while (q.Count > 0)
        {
            int v = q.Dequeue();
            answer += v + " ";

            foreach (int nv in new int[] { v * 2, v * 2 + 1 })
            {
                if (nv > 7) continue;
                q.Enqueue(nv);
            }
        }

        return answer.Trim();
    }

    static void Main()
    {
        Console.WriteLine(Solution());
    }
}

////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;

class Program
{
    static string Solution()
    {
        string answer = "";
        Queue<int> queue = new Queue<int>();
        queue.Enqueue(1);

        while(queue.Count > 0)
        {
            // 하나빼서
            int v = queue.Dequeue();

            answer += $"{v} ";

            // 하나뺀거 관련해서 두개 더 넣고,
            for (int i = 0; i < 2; i++)
            {
                int value = v * 2 + i;
                if(value <= 7)
                    queue.Enqueue(value);
            }
        }

        return answer;
    }

    static void Main()
    {
        Console.WriteLine(Solution());
    }
}



✅ 5. 송아지 찾기 (BFS) 

using System;
using System.Collections.Generic;

class Program
{
    static int Solution(int s, int e)
    {
        int[] ch = new int[10001];
        int[] dis = new int[10001];
        Queue<int> q = new Queue<int>();

        q.Enqueue(s);
        ch[s] = 1;

        while (q.Count > 0)
        {
            int x = q.Dequeue();

            foreach (int nx in new int[] { x - 1, x + 1, x + 5 })
            {
                if (nx == e) return dis[x] + 1;
                if (nx > 0 && nx <= 10000 && ch[nx] == 0)
                {
                    ch[nx] = 1;
                    q.Enqueue(nx);
                    dis[nx] = dis[x] + 1;
                }
            }
        }

        return 0;
    }

    static void Main()
    {
        Console.WriteLine(Solution(5, 14));
    }
}





✅ 6. 섬나라 아일랜드 (BFS)

using System;
using System.Collections.Generic;

class Program
{
    static int Solution(int[,] board)
    {
        int n = board.GetLength(0);
        int answer = 0;
        int[] dx = { -1,-1,0,1,1,1,0,-1 };
        int[] dy = { 0,1,1,1,0,-1,-1,-1 };
        Queue<(int, int)> q = new Queue<(int, int)>();

        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < n; j++)
            {
                if (board[i, j] == 1)
                {
                    board[i, j] = 0;
                    q.Enqueue((i, j));
                    answer++;

                    while (q.Count > 0)
                    {
                        var (x, y) = q.Dequeue();
                        for (int k = 0; k < 8; k++)
                        {
                            int nx = x + dx[k];
                            int ny = y + dy[k];
                            if (nx >= 0 && nx < n && ny >= 0 && ny < n && board[nx, ny] == 1)
                            {
                                board[nx, ny] = 0;
                                q.Enqueue((nx, ny));
                            }
                        }
                    }
                }
            }
        }

        return answer;
    }

    static void Main()
    {
        int[,] arr = {
            {1,1,0,0,0,1,0},
            {0,1,1,0,1,1,0},
            {0,1,0,0,0,0,0},
            {0,0,0,1,0,1,1},
            {1,1,0,1,1,0,0},
            {1,0,0,0,1,0,0},
            {1,0,1,0,1,0,0}
        };
        Console.WriteLine(Solution(arr));
    }
}





✅ 7. 섬나라 아일랜드 (DFS)

using System;

class Program
{
    static int answer = 0;
    static int n;
    static int[] dx = { -1, -1, 0, 1, 1, 1, 0, -1 };
    static int[] dy = { 0, 1, 1, 1, 0, -1, -1, -1 };

    static void DFS(int x, int y, int[,] board)
    {
        board[x, y] = 0;
        for (int k = 0; k < 8; k++)
        {
            int nx = x + dx[k];
            int ny = y + dy[k];
            if (nx >= 0 && nx < n && ny >= 0 && ny < n && board[nx, ny] == 1)
            {
                DFS(nx, ny, board);
            }
        }
    }

    static int Solution(int[,] board)
    {
        n = board.GetLength(0);
        answer = 0;

        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < n; j++)
            {
                if (board[i, j] == 1)
                {
                    answer++;
                    DFS(i, j, board);
                }
            }
        }

        return answer;
    }

    static void Main()
    {
        int[,] arr = {
            {1,1,0,0,0,1,0},
            {0,1,1,0,1,1,0},
            {0,1,0,0,0,0,0},
            {0,0,0,1,0,1,1},
            {1,1,0,1,1,0,0},
            {1,0,0,0,1,0,0},
            {1,0,1,0,1,0,0}
        };
        Console.WriteLine(Solution(arr));
    }
}

✅ 최소 이동 비용 구하기 (Dijkstra) 인접행렬, 인접리스트

using System;
using System.Collections.Generic;

class Program
{
    /*
        예제 입력
        5 8
        1 2 2
        1 3 3
        1 4 1
        2 3 2
        3 4 4
        2 5 5
        3 5 1
        4 5 1
   
        예제 출력
        2
    */

    static int answerMin = int.MaxValue;
    static int[,] board; // 인접행렬.
    static int[] check;

    static void DFS(int curNode, int finishNode, int sum)
    {
        if (curNode == finishNode)
        {
            answerMin = Math.Min(answerMin, sum);
            return;
        }

        for (int i = 1; i <= finishNode; i++)
        {
            if (check[i] == 0 && board[curNode, i] > 0)
            {
                check[i] = 1;
                sum += board[curNode, i];

                DFS(i, finishNode, sum);

                check[i] = 0;
                sum -= board[curNode, i];
            }
        }
    }

    static int Solution(int nodes, List<(int, int, int)> nodeInfoArr)
    {
        board = new int[nodes + 1, nodes + 1];

        foreach ((int from, int to, int value) info in nodeInfoArr)
        {
            board[info.from, info.to] = info.value;
        }

        check = new int[nodes + 1];
        check[1] = 1;

        DFS(1, nodes, 0);

        return answerMin;
    }

    static void Main()
    {
        List<(int, int, int)> arr = new List<(int, int, int)>
           {(1, 2, 2),
            (1, 3, 3),
            (1, 4, 1),
            (2, 3, 2),
            (3, 4, 4),
            (2, 5, 5),
            (3, 5, 1),
            (4, 5, 1)};

        Console.WriteLine(Solution(5, arr));
    }
}

///////////////////////////////////////////////////// 인접리스트
using System;
using System.Collections.Generic;

class Program
{
    /*
        예제 입력
        5 8
        1 2 2
        1 3 3
        1 4 1
        2 3 2
        3 4 4
        2 5 5
        3 5 1
        4 5 1
   
        예제 출력
        2
    */

    static int answerMin = int.MaxValue;
    //static int[,] graph; // 인접행렬.
    static List<List<(int, int)>> graph; // 인접리스트.
    static int[] check;


    static void DFS(int curNode, int finishNode, int sum)
    {
        if (curNode == finishNode)
        {
            answerMin = Math.Min(answerMin, sum);
            return;
        }

        for(int i = 0; i < graph[curNode].Count; i++)
        {
            int to = graph[curNode][i].Item1;
            int value = graph[curNode][i].Item2;

            if (check[to] == 0)
            {
                check[to] = 1;
                sum += value;

                DFS(to, finishNode, sum);

                sum -= value;
                check[to] = 0;
            }
        }
    }

    static int Solution(int nodes, List<(int, int, int)> nodeInfoArr)
    {
        graph = new List<List<(int, int)>>();
        for(int i = 1; i<=nodes; i++)
        {
            graph.Add(new List<(int, int)>());
        }

        foreach ((int from, int to, int value) info in nodeInfoArr)
        {
            graph[info.from].Add((info.to, info.value));
        }

        check = new int[nodes + 1];
        check[1] = 1;

        DFS(1, nodes, 0);

        return answerMin;
    }

    static void Main()
    {
        List<(int, int, int)> arr = new List<(int, int, int)>
           {(1, 2, 2),
            (1, 3, 3),
            (1, 4, 1),
            (2, 3, 2),
            (3, 4, 4),
            (2, 5, 5),
            (3, 5, 1),
            (4, 5, 1)};

        Console.WriteLine(Solution(5, arr));
    }
}