✅ 1. 경로탐색 (DFS - 인접행렬)

using System;
using System.Collections.Generic;

class Program
{
    static int answer = 0;
    static int[,] graph;
    static int[] ch;
    static List<int> path = new List<int>();
    static int n;

    static void DFS(int v)
    {
        if (v == n)
        {
            answer++;
        }
        else
        {
            for (int i = 1; i <= n; i++)
            {
                if (graph[v, i] == 1 && ch[i] == 0)
                {
                    ch[i] = 1;
                    path.Add(i);
                    DFS(i);
                    ch[i] = 0;
                    path.RemoveAt(path.Count - 1);
                }
            }
        }
    }

    static int Solution(int nodes, List<(int, int)> edges)
    {
        n = nodes;
        graph = new int[n + 1, n + 1];
        ch = new int[n + 1];

        foreach (var (from, to) in edges)
            graph[from, to] = 1;

        ch[1] = 1;
        path.Add(1);
        DFS(1);

        return answer;
    }

    static void Main()
    {
        var arr = new List<(int, int)>
        {
            (1, 2), (1, 3), (1, 4), (2, 1), (2, 3), (2, 5),
            (3, 4), (4, 2), (4, 5)
        };
        Console.WriteLine(Solution(5, arr));
    }
}





✅ 2. 경로탐색 (DFS - 인접리스트)

using System;
using System.Collections.Generic;

class Program
{
    static int answer = 0;
    static List<int>[] graph;
    static int[] ch;
    static List<int> path = new List<int>();
    static int n;

    static void DFS(int v)
    {
        if (v == n)
        {
            answer++;
        }
        else
        {
            foreach (int nv in graph[v])
            {
                if (ch[nv] == 0)
                {
                    ch[nv] = 1;
                    path.Add(nv);
                    DFS(nv);
                    ch[nv] = 0;
                    path.RemoveAt(path.Count - 1);
                }
            }
        }
    }

    static int Solution(int nodes, List<(int, int)> edges)
    {
        n = nodes;
        graph = new List<int>[n + 1];
        for (int i = 0; i <= n; i++)
            graph[i] = new List<int>();

        ch = new int[n + 1];

        foreach (var (from, to) in edges)
            graph[from].Add(to);

        ch[1] = 1;
        path.Add(1);
        DFS(1);

        return answer;
    }

    static void Main()
    {
        var arr = new List<(int, int)>
        {
            (1, 2), (1, 3), (1, 4), (2, 1), (2, 3), (2, 5),
            (3, 4), (4, 2), (4, 5)
        };
        Console.WriteLine(Solution(5, arr));
    }
}





✅ 3. 미로탐색 (DFS)

using System;
using System.Collections.Generic;

class Program
{
    static int answer = 0;
    static int[,] dxdy = { { -1, 0 }, { 0, 1 }, { 1, 0 }, { 0, -1 } };

    static void DFS(int x, int y, int[,] board)
    {
        if (x == 6 && y == 6)
        {
            answer++;
        }
        else
        {
            for (int k = 0; k < 4; k++)
            {
                int nx = x + dxdy[k, 0];
                int ny = y + dxdy[k, 1];
                if (nx >= 0 && nx <= 6 && ny >= 0 && ny <= 6 && board[nx, ny] == 0)
                {
                    board[nx, ny] = 1;
                    DFS(nx, ny, board);
                    board[nx, ny] = 0;
                }
            }
        }
    }

    static int Solution(int[,] board)
    {
        board[0, 0] = 1;
        DFS(0, 0, board);
        return answer;
    }

    static void Main()
    {
        int[,] arr = {
            {0,0,0,0,0,0,0},
            {0,1,1,1,1,1,0},
            {0,0,0,1,0,0,0},
            {1,1,0,1,0,1,1},
            {1,1,0,0,0,0,1},
            {1,1,0,1,1,0,0},
            {1,0,0,0,0,0,0}
        };
        Console.WriteLine(Solution(arr));
    }
}





✅ 4. 이진트리 넓이우선탐색 (BFS)

using System;
using System.Collections.Generic;

class Program
{
    static string Solution()
    {
        string answer = "";
        Queue<int> q = new Queue<int>();
        q.Enqueue(1);

        while (q.Count > 0)
        {
            int v = q.Dequeue();
            answer += v + " ";

            foreach (int nv in new int[] { v * 2, v * 2 + 1 })
            {
                if (nv > 7) continue;
                q.Enqueue(nv);
            }
        }

        return answer.Trim();
    }

    static void Main()
    {
        Console.WriteLine(Solution());
    }
}





✅ 5. 송아지 찾기 (BFS)

using System;
using System.Collections.Generic;

class Program
{
    static int Solution(int s, int e)
    {
        int[] ch = new int[10001];
        int[] dis = new int[10001];
        Queue<int> q = new Queue<int>();

        q.Enqueue(s);
        ch[s] = 1;

        while (q.Count > 0)
        {
            int x = q.Dequeue();

            foreach (int nx in new int[] { x - 1, x + 1, x + 5 })
            {
                if (nx == e) return dis[x] + 1;
                if (nx > 0 && nx <= 10000 && ch[nx] == 0)
                {
                    ch[nx] = 1;
                    q.Enqueue(nx);
                    dis[nx] = dis[x] + 1;
                }
            }
        }

        return 0;
    }

    static void Main()
    {
        Console.WriteLine(Solution(5, 14));
    }
}





✅ 6. 섬나라 아일랜드 (BFS)

using System;
using System.Collections.Generic;

class Program
{
    static int Solution(int[,] board)
    {
        int n = board.GetLength(0);
        int answer = 0;
        int[] dx = { -1,-1,0,1,1,1,0,-1 };
        int[] dy = { 0,1,1,1,0,-1,-1,-1 };
        Queue<(int, int)> q = new Queue<(int, int)>();

        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < n; j++)
            {
                if (board[i, j] == 1)
                {
                    board[i, j] = 0;
                    q.Enqueue((i, j));
                    answer++;

                    while (q.Count > 0)
                    {
                        var (x, y) = q.Dequeue();
                        for (int k = 0; k < 8; k++)
                        {
                            int nx = x + dx[k];
                            int ny = y + dy[k];
                            if (nx >= 0 && nx < n && ny >= 0 && ny < n && board[nx, ny] == 1)
                            {
                                board[nx, ny] = 0;
                                q.Enqueue((nx, ny));
                            }
                        }
                    }
                }
            }
        }

        return answer;
    }

    static void Main()
    {
        int[,] arr = {
            {1,1,0,0,0,1,0},
            {0,1,1,0,1,1,0},
            {0,1,0,0,0,0,0},
            {0,0,0,1,0,1,1},
            {1,1,0,1,1,0,0},
            {1,0,0,0,1,0,0},
            {1,0,1,0,1,0,0}
        };
        Console.WriteLine(Solution(arr));
    }
}





✅ 7. 섬나라 아일랜드 (DFS)

using System;

class Program
{
    static int answer = 0;
    static int n;
    static int[] dx = { -1, -1, 0, 1, 1, 1, 0, -1 };
    static int[] dy = { 0, 1, 1, 1, 0, -1, -1, -1 };

    static void DFS(int x, int y, int[,] board)
    {
        board[x, y] = 0;
        for (int k = 0; k < 8; k++)
        {
            int nx = x + dx[k];
            int ny = y + dy[k];
            if (nx >= 0 && nx < n && ny >= 0 && ny < n && board[nx, ny] == 1)
            {
                DFS(nx, ny, board);
            }
        }
    }

    static int Solution(int[,] board)
    {
        n = board.GetLength(0);
        answer = 0;

        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < n; j++)
            {
                if (board[i, j] == 1)
                {
                    answer++;
                    DFS(i, j, board);
                }
            }
        }

        return answer;
    }

    static void Main()
    {
        int[,] arr = {
            {1,1,0,0,0,1,0},
            {0,1,1,0,1,1,0},
            {0,1,0,0,0,0,0},
            {0,0,0,1,0,1,1},
            {1,1,0,1,1,0,0},
            {1,0,0,0,1,0,0},
            {1,0,1,0,1,0,0}
        };
        Console.WriteLine(Solution(arr));
    }
}