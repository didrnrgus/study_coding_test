//////////////////////////////////////////////////////////////////
✅ 1. 올바른 괄호

#include <iostream>
#include <stack>
#include <string>

std::string solution(const std::string& s)
{
    std::stack<char> stack;
    for (char ch : s)
    {
        if (ch == '(') stack.push(ch);
        else {
            if (stack.empty()) return "NO";
            stack.pop();
        }
    }
    return stack.empty() ? "YES" : "NO";
}

int main()
{
    std::string str = "(()(()))())";
    std::cout << solution(str) << std::endl; // 결과: NO
    return 0;
}



#include <iostream>
#include <stack>
#include <string>

std::string solution(const std::string& s)
{
    // (())() 이것은 괄호의 쌍이 올바르게 위치하는 거지만, 
    // (()())) 은 올바른 괄호가 아니다

    std::stack<char> _stack;

    for (int i = 0; i < s.size(); i++)
    {
        if (s[i] == '(')
        {
            _stack.push(s[i]);
        }
        else
        {
            if (_stack.size() == 0) 
                return "NO";

            _stack.pop();
        }
    }

    return _stack.size() > 0 ? "NO" : "YES";
}

int main()
{
    std::string str = "(())()";
    // std::string str = "(()(()))())";
    std::cout << solution(str) << std::endl; // 결과: NO
    return 0;
}


//////////////////////////////////////////////////////////////////
✅ 2. 괄호 문자 제거

#include <iostream>
#include <stack>
#include <string>

// 몽땅 넣어도 괄호 밖에 있는것만 남음.
std::string solution(const std::string& s)
{
    std::stack<char> stack;
    for (char ch : s)
    {
        if (ch == ')') {
            while (!stack.empty() && stack.top() != '(') stack.pop();
            if (!stack.empty()) stack.pop();
        } else {
            stack.push(ch);
        }
    }
    std::string result;
    while (!stack.empty()) {
        result = stack.top() + result;
        stack.pop();
    }
    return result;
}

int main()
{
    std::string str = "(A(BC)D)EF(G(H)(IJ)K)LM(N)";
    std::cout << solution(str) << std::endl; // 결과: EFLM
    return 0;
}



#include <iostream>
#include <stack>
#include <string>

std::string solution(const std::string& s)
{
    // 입력된  문자열에서  소괄호  (  )  사이에  존재하는
    // 모든  문자를  제거하고  남은  문자만  출력하는 프로그램을 작성하세요
    
    // 첫 줄에 문자열이 주어진다.문자열의 길이는 100을 넘지 않는다.
    
    // 마지막께 ( 라면? -> 다음오는문자들은 모두 지워
    // 마지막께 ) 이더라도? 스택의 홀짝이 안맞으면? 다 안닫힌거.

    char last = '\0';
    std::string result;
    std::stack<char> _stack;

    for (int i = 0; i < s.size(); i++)
    {
        if (s[i] == '(')
        {
            _stack.push(s[i]);
            last = s[i];
        }
        else if (s[i] == ')')
        {
            _stack.pop();
            last = s[i];
        }
        else
        {
            if (last == ')' && _stack.size() % 2 == 0)
            {
                result += s[i];
            }
        }
    }

    return result;
}

int main()
{
    std::string str = "(A(BC)D)EF(G(H)(IJ)K)LM(N)";
    std::cout << solution(str) << std::endl; // 결과: EFLM
    return 0;
}



//////////////////////////////////////////////////////////////////
✅ 3. 크레인 인형뽑기
#include <iostream>
#include <vector>
#include <stack>

// 크레인 인형뽑기 로직 함수
int solution(std::vector<std::vector<int>> board, const std::vector<int>& moves)
{
    std::stack<int> stack; // 인형을 담는 바구니 역할
    int answer = 0;        // 터진 인형 개수 합계

    // 각 move 위치(열 번호)를 하나씩 순회
    for (int pos : moves)
    {
        // 위에서 아래로 탐색 (각 행의 해당 열)
        for (std::size_t i = 0; i < board.size(); ++i)
        {
            // 해당 위치에 인형이 존재하면
            if (board[i][pos - 1] != 0)
            {
                int tmp = board[i][pos - 1]; // 뽑은 인형 번호
                board[i][pos - 1] = 0;       // 뽑았으므로 0으로 처리

                // 바구니의 맨 위 인형과 같으면 터뜨림
                if (!stack.empty() && stack.top() == tmp) {
                    stack.pop();       // 같은 인형 제거
                    answer += 2;       // 2개 터짐
                } else {
                    stack.push(tmp);   // 다른 인형이면 바구니에 추가
                }

                break; // 한 번 뽑았으면 그 move는 끝
            }
        }
    }
    return answer; // 총 터진 인형 수 반환
}

int main()
{
    // 인형판 (5x5)
    std::vector<std::vector<int>> board = {
        {0,0,0,0,0},
        {0,0,1,0,3},
        {0,2,5,0,1},
        {4,2,4,4,2},
        {3,5,1,3,1}
    };

    // 크레인이 인형을 뽑을 열 위치 (1-based index)
    std::vector<int> moves = {1,5,3,5,1,2,1,4};

    // 결과 출력: 터진 인형 개수
    std::cout << solution(board, moves) << std::endl; // 결과: 4
    return 0;
}



#include <iostream>
#include <vector>
#include <stack>

int solution(std::vector<std::vector<int>> board, const std::vector<int>& moves)
{
    // 인형이 없는칸은 빈캄 -> 0
    // 터뜨려져 사라진 인형의 갯수

    std::stack<int> basket;
    int removedCount = 0;
    // 내 입맛에 맞게 변환 필요? 아니 그냥

    // moves 순회
    for (int i = 0; i < moves.size(); i++)
    {
        // 내려가는거 순회 -> 숫자 나올떄까지
        for (int j = 0; j < board.size(); j++)
		{
			int sample = board[j][moves[i] - 1];
			if (sample != 0)
			{
				board[j][moves[i] - 1] = 0;

				if (!basket.empty() && basket.top() == sample)
				{
					basket.pop();
					removedCount += 2;
				}
				else
				{
					basket.push(sample);
				}
				break;
			}
		}
	}

    return removedCount;
}

int main()
{
    std::vector<std::vector<int>> board = {
        {0,0,0,0,0},
        {0,0,1,0,3},
        {0,2,5,0,1},
        {4,2,4,4,2},
        {3,5,1,3,1}
    };
    std::vector<int> moves = { 1,5,3,5,1,2,1,4 };
    std::cout << solution(board, moves) << std::endl; // 결과: 4
    return 0;
}




//////////////////////////////////////////////////////////////////
✅ 4. 후위식 연산

#include <iostream>
#include <stack>
#include <string>
#include <cctype>

int solution(const std::string& s)
{
    std::stack<int> stack;
    for (char ch : s)
    {
        if (std::isdigit(ch)) stack.push(ch - '0');
        else {
            int rt = stack.top(); stack.pop();
            int lt = stack.top(); stack.pop();
            if (ch == '+') stack.push(lt + rt);
            else if (ch == '-') stack.push(lt - rt);
            else if (ch == '*') stack.push(lt * rt);
            else if (ch == '/') stack.push(lt / rt);
        }
    }
    return stack.top();
}

int main()
{
    std::string str = "352+*9-";
    std::cout << solution(str) << std::endl; // 결과: 12
    return 0;
}


#include <iostream>
#include <stack>
#include <string>
#include <cctype>

/*

'A' → 65
'a' → 97
'0' → 48
' ' (space) → 32

*/

int solution(const std::string& s)
{
    // 숫자는 스택에 쌓고, 연산자가 나오면 숫자 하나 뽑아서 
    // A -> 연산자 -> B 순으로 넣어 연산한다.

    std::stack<char> _stack;
    int result = 0;

    for (int i = 0; i < s.size(); i++)
    {
        if (std::isdigit(s[i]))
        {
            // '3' '5' '2' -> 그냥 숫자가 아니라 아스키 값이들어가서
            // '0' 을 빼주면 됨.
            _stack.push(s[i] - '0');
        }
        else
        {
            int b = _stack.top();
            _stack.pop();

            int a = _stack.top();
            _stack.pop();

            if (s[i] == '+') _stack.push(a + b);
            else if (s[i] == '-') _stack.push(a - b);
            else if (s[i] == '*') _stack.push(a * b);
            else if (s[i] == '/') _stack.push(a / b);
        }
    }

    return _stack.top();
}

int main()
{
    std::string str = "352+*9-";
    std::cout << solution(str) << std::endl; // 결과: 12
    return 0;
}

////////////////////////////////////////////////////////////
/*


#include <iostream>
#include <stack>
#include <string>
#include <cctype>  // std::isdigit

// 연산자의 우선순위를 반환하는 함수
int precedence(char op) {
    if (op == '+' || op == '-') return 1;  // +, - 는 낮은 우선순위
    if (op == '*' || op == '/') return 2;  // *, / 는 높은 우선순위
    return 0;
}

// 중위식을 후위식으로 변환하는 함수
std::string infixToPostfix(const std::string& infix) {
    std::string postfix;      // 결과로 반환할 후위표기식
    std::stack<char> st;      // 연산자를 담는 스택

    for (char ch : infix) {
        if (std::isspace(ch)) continue;  // 공백 무시

        if (std::isdigit(ch)) {
            // 숫자라면 결과 문자열에 추가
            postfix += ch;
            postfix += ' ';  // 숫자 구분을 위한 공백 추가
        }
        else if (ch == '(') {
            // 여는 괄호는 무조건 스택에 push
            st.push(ch);
        }
        else if (ch == ')') {
            // 닫는 괄호는 여는 괄호가 나올 때까지 pop
            while (!st.empty() && st.top() != '(') {
                postfix += st.top();
                postfix += ' ';
                st.pop();
            }
            if (!st.empty()) st.pop();  // '(' 제거
        }
        else {
            // 연산자라면, 우선순위에 따라 스택에서 pop 후 push
            while (!st.empty() && precedence(st.top()) >= precedence(ch)) {
                postfix += st.top();
                postfix += ' ';
                st.pop();
            }
            st.push(ch);
        }
    }

    // 남아있는 연산자들 모두 pop
    while (!st.empty()) {
        postfix += st.top();
        postfix += ' ';
        st.pop();
    }

    return postfix;
}

int main() {
    std::string infix = "3 + 4 * 2 / ( 1 - 5 )";
    std::string postfix = infixToPostfix(infix);
    std::cout << "Postfix: " << postfix << std::endl;
}
*/


//////////////////////////////////////////////////////////////////
✅ 5. 쇠막대기
#include <iostream>
#include <stack>
#include <string>

// 괄호 문자열을 분석하여 잘려진 막대 조각 수를 반환
int solution(const std::string& s)
{
	std::stack<char> stack;  // 현재 열려있는 '(' 괄호(막대 시작)를 추적하는 스택
	int answer = 0;          // 잘려진 조각 수

	for (std::size_t i = 0; i < s.size(); ++i)
	{
		if (s[i] == '(')
		{
			// 여는 괄호이면 스택에 push (막대 시작 또는 레이저 시작)
			stack.push('(');
		}
		else
		{
			// 닫는 괄호인 경우, 앞의 여는 괄호와 짝을 이루므로 pop
			stack.pop();

			if (s[i - 1] == '(')
			{
				// 바로 앞이 '('인 경우: '()' → 레이저
				// 현재 열려있는 막대 수만큼 조각이 생김
				answer += stack.size();
			}
			else
			{
				// 바로 앞이 ')'인 경우: 막대의 끝
				// 막대 하나의 끝이므로 조각 1개 추가
				answer++;
			}
		}
	}

	return answer;
}

int main()
{
	std::string str = "()(((()())(())()))(())";

	// 위 문자열은 레이저와 쇠막대기를 표현한 것으로,
	// 결과적으로 잘려진 막대 조각의 총 개수는 17개
	std::cout << solution(str) << std::endl; // 출력: 17

	return 0;
}






//////////////////////////////////////////////////////////////////
✅ 6. 공주 구하기

#include <iostream>
#include <queue>

int solution(int n, int k)
{
    std::queue<int> q;
    for (int i = 1; i <= n; ++i)
        q.push(i);

    while (q.size() > 1)
    {
        for (int i = 1; i < k; ++i)
        {
            q.push(q.front());
            q.pop();
        }
        q.pop();
    }
    return q.front();
}

int main()
{
    int n = 8;
    int k = 3;
    std::cout << solution(n, k) << std::endl; // 결과: 7
    return 0;
}



#include <iostream>
#include <queue>

int solution(int n, int k)
{
	 // 왕자 N명
	 // 나이순으로 1~N 까지 차례로 번호매김.
	 // 1번부터 N까지 순서대로 시계방향으로 돌아가며 동그랗게 앚게 함.
	 // 1번부터 시계방향으로 돌아가며 1부터 시작해 번호 외침
	 // 한왕자가 특정숫자K를 외치면 그 왕자는 제외됨. -> 원 밖으로 나옴.
	 // 다음 왕자부터 다시 1부터 시작하여 본호를 외침.
	 // 마지막 남은 왕자가 공주 구하러 감.

	std::queue<int> peoples;
	int curPerson = 1;
	int curCount = 1;

	for (int i = 1; i <= n; i++)
	{
		peoples.push(i);
	}

	while (peoples.size() > 1)
	{
		curPerson = peoples.front();
		peoples.pop();

		if (curCount != k)
		{
			peoples.push(curPerson);
		}

		curCount++;

		if (curCount > k)
			curCount = 1;
	}

	return peoples.front();
}

int main()
{
	int n = 8; // 사람 수
	int k = 3; // 외치면 제외되는 숫자
	std::cout << solution(n, k) << std::endl; // 결과: 7
	return 0;
}



//////////////////////////////////////////////////////////////////
✅ 7. 교육 과정 설계

#include <iostream>
#include <queue>
#include <string>

std::string solution(const std::string& need, const std::string& plan)
{
    std::queue<char> q;
    for (char ch : need) q.push(ch);

    for (char ch : plan)
    {
        if (q.empty()) break;
        if (ch == q.front()) {
            q.pop();
        } else if (need.find(ch) != std::string::npos) {
            return "NO";
        }
    }
    return q.empty() ? "YES" : "NO";
}

int main()
{
    std::string need = "CBA";
    std::string plan = "CBDAGE";
    std::cout << solution(need, plan) << std::endl; // 결과: YES
    return 0;
}



#include <iostream>
#include <queue>
#include <string>

std::string solution(const std::string& need, const std::string& plan)
{
    std::queue<char> aa;

    for (char e : need)
    {
        aa.push(e);
    }

    for (char e : plan)
    {
        if (aa.empty())
            break;

        if (e == aa.front())
        {
            aa.pop();
        }
    }

    return aa.size() == 0 ? "YES" : "NO";
}

int main()
{
    std::string need = "CAB";
    std::string plan = "CBDAGE";
    std::cout << solution(need, plan) << std::endl; // 결과: YES
    return 0;
}