////////////////////////////////////////////////////////////////
✅ 1. 자리수의 합 (1. 자리수의 합.txt)

#include <iostream>
#include <vector>
#include <string>

int solution(int n, const std::vector<int>& arr) 
{
    int answer = 0;
    int max = std::numeric_limits<int>::min();
    for (std::size_t i = 0; i < arr.size(); ++i) 
    {
        int sum = 0, tmp = arr[i];
        while (tmp) 
        {
            sum += tmp % 10;
            tmp /= 10;
        }
        if (sum > max || (sum == max && arr[i] > answer)) 
        {
            max = sum;
            answer = arr[i];
        }
    }
    return answer;
}

int main() 
{
    std::vector<int> arr = 
    {128, 460, 603, 40, 521, 137, 123};
    std::cout << solution(7, arr) << std::endl;
    return 0;
}

// #######################나의 풀이
#include <iostream>
#include <vector>
#include <string>

int solution(int n, const std::vector<int>& arr)
{
	// 각 자연수의 자릿수의 합을 구하고,
	// 그 합이 최대인 자연수를 출력하라

	int max = 0;
	int result = 0;

	for (int i = 0; i < arr.size(); i++)
	{
		int numInArray = arr[i];
		int temp = numInArray;
		int restSum = 0;

		while (temp > 0)
		{
			int rest = temp % 10;
			temp = temp / 10;
			restSum += rest;
		}

		if (max < restSum || (max == restSum && result < numInArray))
		{
			max = restSum;
			result = numInArray;
		}
		

	}

	return result;

}

int main()
{
	std::vector<int> arr = { 128, 460, 603, 40, 521, 137, 123 };
	std::cout << solution(7, arr) << std::endl;
	return 0;
}


////////////////////////////////////////////////////////////////
✅ 2. 뒤집은 소수 (2. 뒤집은 소수.txt)

#include <iostream>
#include <vector>
#include <cmath> // std::sqrt(num)

bool isPrime(int num) 
{
    if (num == 1) return false;
    for (int i = 2; i <= static_cast<int>(std::sqrt(num)); ++i) 
    {
        if (num % i == 0) return false;
    }
    return true;
}

std::vector<int> solution(const std::vector<int>& arr) 
{
    std::vector<int> answer;
    for (std::size_t i = 0; i < arr.size(); ++i) 
    {
        int x = arr[i], res = 0;
        while (x > 0) 
        {
            res = res * 10 + (x % 10);
            x /= 10;
        }
        if (isPrime(res)) 
        {
            answer.push_back(res);
        }
    }
    return answer;
}

int main() 
{
    std::vector<int> arr = 
    {32, 55, 62, 20, 250, 370, 200, 30, 100};
    std::vector<int> result = solution(arr);
    for (std::size_t i = 0; i < result.size(); ++i) 
    {
        std::cout << result[i] << " ";
    }
    std::cout << std::endl;
    return 0;
}

// #######################나의 풀이
#include <iostream>
#include <vector>
#include <cmath>

bool IsPrime(int num)
{
    // 소수 2부터 
    if (num < 2)
        return false;

    // 약수가 1과 자기자신
    for (int i = 2; i < std::sqrt(num); i++)
    {
        if (num % i == 0)
        {
            // 나누어 떨어진다면 또다른 약수..
            // 소수는 아니다.
            return false;
        }
    }

    return true;
}

std::vector<int> solution(const std::vector<int>& arr)
{
    std::vector<int> result;

    for (int i = 0; i < arr.size(); i++)
    {
        int temp = arr[i];
        int reverse = 0;

        while (temp > 0)
        {
            int a = temp % 10;
            temp = temp / 10;
            reverse += a;

            if (temp > 0)
                reverse = reverse * 10;
        }

        if (IsPrime(reverse))
        {
            result.push_back(reverse);
        }

    }

    return result;
}

int main()
{
    std::vector<int> arr =
    { 32, 55, 62, 20, 250, 370, 200, 30, 100 };
    std::vector<int> result = solution(arr);
    for (std::size_t i = 0; i < result.size(); ++i)
    {
        std::cout << result[i] << " ";
    }
    std::cout << std::endl;
    return 0;
}



////////////////////////////////////////////////////////////////
✅ 3. 멘토링 (3. 멘토링.txt)

#include <iostream>
#include <vector>

int solution(const std::vector<std::vector<int>>& test) 
{
    int answer = 0;
    int m = static_cast<int>(test.size());
    int n = static_cast<int>(test[0].size());

    for (int i = 1; i <= n; ++i) 
    {
        for (int j = 1; j <= n; ++j) 
        {
            int cnt = 0;
            for (int k = 0; k < m; ++k) 
            {
                int pi = 0, pj = 0;
                for (int s = 0; s < n; ++s) 
                {
                    if (test[k][s] == i) pi = s;
                    if (test[k][s] == j) pj = s;
                }
                if (pi < pj) ++cnt;
            }
            if (cnt == m) ++answer;
        }
    }
    return answer;
}

int main() 
{
    std::vector<std::vector<int>> arr = 
    {
        
        {3, 4, 1, 2},
        
        {4, 3, 2, 1},
        
        {3, 1, 4, 2}
    };
    std::cout << solution(arr) << std::endl;
    return 0;
}

// #######################나의 풀이
#include <iostream>
#include <vector>

int solution(const std::vector<std::vector<int>>& test, int M, int N)
{
    // 멘토 멘티의 짝 가능 경우가 몇개인지 구하기.
    // A가 B보다 항상 앞서야 (A B) 멘토멘티가 가능하다.
    // 3번 동안 모두 앞서야 함. -> 앞선 횟수도 3번이어야 함.

    // 모든 학생수를 일단 본다.
    // 같은 사람이 멘토, 멘티를 할수 없다.
    // M 번의 테스트 모두 확인해야 함.
    // 해당 테스트에서 등수 찾아보고
    int result = 0;

    for (int i = 1; i <= N; i++)
    {
        for (int j = 1; j <= N; j++)
        {
            if (i == j)
                continue;

            // 이제 두사람은 골라놓았음.

            
            // 두 사람에 대해서 테스트 결과를 검사한다
            bool isFront = true;

            for (int idxTest = 0; idxTest < M; idxTest++)
            {
                int pi = 0;
                int pj = 0;

                // 등수
                for (int s = 0; s < N; s++)
                {
                    if (test[idxTest][s] == i)
                    {
                        pi = s;
                    }
                    if (test[idxTest][s] == j)
                    {
                        pj = s;
                    }
                }

                // 멘토 멘티 짝의 검사니까 누가 더 위인지 중요 x
                // 그저 3번의 테스트동안 모두 한사람이 더 잘했는지가 중요.
                // 두 조건중 하나라도 틀어지면 안되는거
                if (pi > pj)
                {
                    isFront = true;
                }
                else
                {
                    isFront = false;
                    break;
                }
            }

            if (isFront)
                result++;
        }
    }

    return result;

}

int main()
{
    std::vector<std::vector<int>> arr =
    {
        // 3번의 시험을 본 것임.
        {3, 4, 1, 2},// 학생 수의 성적 순차 나열
        {4, 3, 2, 1},
        {3, 1, 4, 2}
    };
    std::cout << solution(arr, arr.size(), arr[0].size()) << std::endl;
    return 0;
}


////////////////////////////////////////////////////////////////
✅ 4. K번째 큰 수 (5. K번째 큰 수.txt)

#include <iostream>
#include <vector>
#include <set>
#include <algorithm>

int solution(int n, int k, const std::vector<int>& card) 
{
    std::set<int, std::greater<int>> s;
    for (int i = 0; i < n; ++i) 
    {
        for (int j = i + 1; j < n; ++j) 
        {
            for (int l = j + 1; l < n; ++l) 
            {
                s.insert(card[i] + card[j] + card[l]);
            }
        }
    }

    std::vector<int> sorted(s.begin(), s.end());
    if (k - 1 < static_cast<int>(sorted.size()))
        return sorted[k - 1];
    else
        return -1;  // 예외 처리
}

int main() 
{
    std::vector<int> arr = 
    {13, 15, 34, 23, 45, 65, 33, 11, 26, 42};
    std::cout << solution(10, 3, arr) << std::endl;
    return 0;
}




////////////////////////////////////////////////////////////////
✅ 5. 졸업선물 (4. 졸업선물.txt)

// #######################나의 풀이
#include <iostream>
#include <vector>
#include <algorithm>

int solution(int m, std::vector<std::pair<int, int>> product)
{
    // 선생님 예산 한정
    // 현재 예산으로 최대 몇명의 학생에게 선물을 사줄 수 있는지?
    // 뭣이든 가격 하나만 50퍼 할인해서 살 수 있음.
    // 배송비는 할인에 포함 안됨.
    // 현재 예산으로 선물할 수 있는 최대 학생수
    // 선생님 최소한 1개 이상의 상품을 살 수 있는 예산을 가지고있다.

    int answer = 0;  // 최대로 선물할 수 있는 학생 수
    int n = static_cast<int>(product.size());  // 학생 수

    // 1. 각 학생의 상품 비용 + 배송비를 기준으로 오름차순 정렬
    //    => 할인 없이 전체 금액이 적은 학생부터 고려
    std::sort(product.begin(), product.end(),
        [](const std::pair<int, int>& a, const std::pair<int, int>& b)
        {
            return (a.first + a.second) < (b.first + b.second);
        });
    // -> 일단 많은 학생 수를 포함시켜야 하니까 .
    // 중간에 큰놈이 껴있으면 일이 복잡해짐.

    // 2. 각 학생을 할인 대상(단 한 명)으로 가정하고 최대 몇 명에게 선물할 수 있는지 계산
    for (int i = 0; i < n; ++i)
    {
        // i번째 학생에게는 상품 가격의 절반 할인 적용
        int money = m - (product[i].first / 2 + product[i].second);
        int cnt = 1;  // i번째 학생은 이미 선물함

        // 나머지 학생들 중에서 예산 내에서 선물할 수 있는 만큼 선물
        for (int j = 0; j < n; ++j)
        {
            if (j == i) continue;  // 이미 할인한 학생은 건너뜀

            int cost = product[j].first + product[j].second;
            //if (cost > money) continue;  // 예산 초과면 넘어감
            if (cost > money) break;  // 예산 초과면 탈출하고, 다음얘꺼 할인먹여서 비교 ㄱ

            money -= cost;  // 해당 학생에게 선물
            ++cnt;
        }

        // 현재 경우에서 최대 선물 수 갱신
        answer = std::max(answer, cnt);
    }

    return answer;
}

int main()
{
    std::vector<std::pair<int, int>> arr =
    {
        // 애들 5명
        // 가격 , 배송비
        {6, 6},
        {2, 2},
        {4, 3},
        {4, 5},
        {10, 3}
    };
        // 돈은 28
    std::cout << solution(28, arr) << std::endl;
    return 0;
}